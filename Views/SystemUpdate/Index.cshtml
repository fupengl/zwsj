  
@using DataAccess
@model Service.DTOs.ToolbarPermissionDto

@{
    ViewBag.Title = "SystemUpdate";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var X = Html.X();
}


@{
    
    var storeDataDictionaryLookup_AnZhuangBaoLeiXing_F = X.StoreFor<DataDictionary>()
       .ID("storeDataDictionaryLookup_AnZhuangBaoLeiXing_F")
       .AutoLoad(false)
       .Parameters(ps =>
       {
           ps.Add(X.StoreParameter().Name("category").Value("SYS").Mode(ParameterMode.Value));
           ps.Add(X.StoreParameter().Name("subCategory").Value("AnZhuangBaoLeiXing").Mode(ParameterMode.Value));
       }
       )
       .Proxy(p => p
           .Add(X.AjaxProxy()
               .Url(Url.Action("GetDataDictionary", "DataDictionary"))
               .Reader(r => r.Add(X.JsonReader().Root("data")))));

    var SystemUpdateModel = X.Model()
        .ID("SystemUpdateModel")
        .Fields(f => {
            f.Add(X.ModelField().Name("Id"));
            f.Add(X.ModelField().Name("Version"));
            f.Add(X.ModelField().Name("Type"));
            f.Add(X.ModelField().Name("Url"));
                         f.Add(X.ModelField().Name("UpdateTime").Type(ModelFieldType.Date));
                         f.Add(X.ModelField().Name("PlistUrl"));

        });

    var storeSystemUpdate = X.Store()
        .ID("storeSystemUpdate")
        .AutoLoad(false)
        .RemoteFilter(true)
        .RemotePaging(true)
        .RemoteSort(true)
        .Model(SystemUpdateModel)
        .Proxy(p => p
            .Add(X.AjaxProxy()
                .Url(Url.Action("GetAll", "SystemUpdate"))
                .Reader(r => r.Add(X.JsonReader().Root("data")))
            )
        );

    var grid = X.GridPanel()
        .ID("gridSystemUpdate")
        .Region(Region.Center)
        .Store(storeSystemUpdate)
        .SelectionModel(
            X.CheckboxSelectionModel()
                .Mode(SelectionMode.Single)
        )
        .ColumnModel(
            X.RowNumbererColumn().Width(30).Sortable(false),
            X.Column().Text("Id").DataIndex("Id").Hidden(true),
            X.Column().Text("版本号").DataIndex("Version").Width(80).Hidden(false),
            X.Column().Text("类型").DataIndex("Type").Width(80).Hidden(false),
            X.Column().Text("链接").DataIndex("Url").Width(250).Hidden(false),
           X.Column().Text("InstallUrl").DataIndex("PlistUrl").Width(550).Hidden(false),
            X.DateColumn().Text("更新时间").DataIndex("UpdateTime").Format("yyyy/MM/dd").Width(80).Hidden(false)
         )

        .Listeners(l => l.BeforeRender.Handler = " App.storeSystemUpdate.load();  ")
        .Features(
            Html.X().GridFilters()
                .MenuFilterText("过滤")
                .Local(false)
                .Filters(
                    X.NumericFilter().DataIndex("Id"),
                    X.StringFilter().DataIndex("Version"),
                    X.StringFilter().DataIndex("Type"),
                    X.StringFilter().DataIndex("Url"),
                    X.StringFilter().DataIndex("PlistUrl"),
                    X.DateFilter().DataIndex("UpdateTime")
                )
        )
        .TopBar(t => t
            .Add(X
                .Toolbar()
                .ID("toolbarSystemUpdate")
                .Items(ti =>
                {
                    //ti.Add(X.Button()
                    //    .ID("btnAdd")
                    //    .Disabled(@Model.DisableAdd)
                    //    .Text("新增")
                    //    .Icon(Icon.ApplicationAdd)
                    //    .DirectEvents(
                    //        de =>
                    //        {
                    //            de.Click.Url = Url.Action("Create", "SystemUpdate");
                    //            de.Click.EventMask.ShowMask = true;
                    //        }));
                    //ti.Add(X.Button()
                    //    .ID("btnEdit")
                    //    .Disabled(@Model.DisableEdit)
                    //    .Text("修改")
                    //    .Icon(Icon.ApplicationFormEdit)
                    //    .DirectEvents(
                    //        de =>
                    //        {
                    //            de.Click.Before = "return beforeEditCheck(App.gridSystemUpdate);";
                    //            de.Click.Url = Url.Action("Edit", "SystemUpdate");
                    //            de.Click.EventMask.ShowMask = true;
                    //            de.Click.ExtraParams.Add(new Parameter()
                    //            {
                    //                Name = "id",
                    //                Value = "getSelectedRowId(App.gridSystemUpdate)",
                    //                Mode = ParameterMode.Raw
                    //            });
                    //        }));

                    //ti.Add(X.Button()
                    //    .ID("btnRefresh")
                    //    .Disabled(@Model.DisableRefresh)
                    //    .Text("刷新")
                    //    .Icon(Icon.TableRefresh)
                    //    .DirectEvents(
                    //        de =>
                    //        {
                    //            de.Click.Url = Url.Action("Refresh", "SystemUpdate");
                    //            de.Click.EventMask.ShowMask = true;
                    //        }));
                    //ti.Add(X.ToolbarSeparator());
                    ti.Add(X.TextField()
                        .ID("Version")
                        .FieldLabel("版本号")
                        .LabelWidth(60)
                        .Width(150)
                        .AllowBlank(false)
                        .Hidden(false)
                        );
                    
                    ti.Add(X.ComboBox()
                       .ID("AnZhuangBaoLeiXing")
                       .AllowBlank(false)
                       .FieldLabel("客户端类型")
                       .LabelWidth(90)
                       .EmptyText("请选择")
                       .ValueField("KeyName")
                       .DisplayField("KeyValue")
                       .HideTrigger(false)
                       .Editable(false)
                       .TriggerAction(TriggerAction.All)
                       .QueryMode(DataLoadMode.Remote)
                       .Store(storeDataDictionaryLookup_AnZhuangBaoLeiXing_F)
                       .Listeners(l =>
                       {
                           l.BeforeRender.Handler = "App.storeDataDictionaryLookup_AnZhuangBaoLeiXing_F.load();  ";
                       }
                       )
                       .Hidden(false));
                    ti.Add(X.TextField()
                        .ID("PlistUrl")
                        .FieldLabel("InstallUrl")
                        .LabelWidth(60)
                        .Width(550)
                        .Value("itms-services://?action=download-manifest&url=https://dn-tysjptplist.qbox.me/ZhiDiData_forTest.plist")
                        .AllowBlank(false)
                        .Hidden(false)
                        );
                    ti.Add(X.Button()
                        .ID("btnUpload")
                        .Disabled(@Model.DisableUpload)
                        .Text("上传")
                        .Icon(Icon.DiskUpload)
                        .DirectEvents(
                            de =>
                            {
                                de.Click.Url = Url.Action("SoftwareUpload", "FileUpload");//plistUrl
                                de.Click.EventMask.ShowMask = true;
                                de.Click.ExtraParams.Add(X.Parameter().Name("version").Value("App.Version.getValue()").Mode(ParameterMode.Raw));
                                de.Click.ExtraParams.Add(X.Parameter().Name("type").Value("App.AnZhuangBaoLeiXing.getValue()").Mode(ParameterMode.Raw));
                                de.Click.ExtraParams.Add(X.Parameter().Name("plistUrl").Value("App.PlistUrl.getValue()").Mode(ParameterMode.Raw));
                            }));
                    ti.Add(X.Button()
                        .ID("btnDelete")
                        .Disabled(@Model.DisableDelete)
                        .Text("删除")
                        .Icon(Icon.ApplicationDelete)
                        .Listeners(l => l.Click.Handler = "deleteRow(App.gridSystemUpdate,'SystemUpdate','Delete')")
                        );
                    ti.Add(X.Button()
                       .ID("btnRefresh")
                       .Disabled(@Model.DisableRefresh)
                       .Text("刷新")
                       .Icon(Icon.TableRefresh)
                       .DirectEvents(
                           de =>
                           {
                               de.Click.Url = Url.Action("Refresh", "SystemUpdate");
                               de.Click.EventMask.ShowMask = true;
                           }));
                    //ti.Add(X.Button()
                    //    .ID("btnExport")
                    //    .Disabled(@Model.DisableExport)
                    //    .Text("导出")
                    //    .Icon(Icon.PageExcel)
                    //    .DirectEvents(
                    //        de =>
                    //        {
                    //            de.Click.Url = Url.Action("ExportToExcel", "SystemUpdate");
                    //            de.Click.IsUpload = true;
                    //            de.Click.ExtraParams.Add(X.Parameter().Name("filters").Value("getFilters(#{gridSystemUpdate})").Mode(ParameterMode.Raw));
                    //            de.Click.ExtraParams.Add(X.Parameter().Name("sorters").Value("getSorters(#{gridSystemUpdate})").Mode(ParameterMode.Raw));
                    //            de.Click.ExtraParams.Add(X.Parameter().Name("columns").Value("getVisibleColumns(#{gridSystemUpdate})").Mode(ParameterMode.Raw));
                    //        })
                    //        );  
                })
            ))
        .BottomBar(b => b
            .Add(X.PagingToolbar()
                .Items(Html.X().Button()
                    .Text("清除过滤条件")
                    .Handler("clearFilters(App.gridSystemUpdate); "))));
}
@(
 X.Viewport()
      .ID("content")
      .Layout(LayoutType.Border)
      .Items(grid)
      )